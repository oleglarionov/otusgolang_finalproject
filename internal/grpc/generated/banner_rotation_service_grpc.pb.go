// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcgenerated

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BannerRotationServiceClient is the client API for BannerRotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotationServiceClient interface {
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveBanner(ctx context.Context, in *RemoveBannerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	IncrementCounter(ctx context.Context, in *IncrementCounterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChooseBanner(ctx context.Context, in *ChooseBannerRequest, opts ...grpc.CallOption) (*ChooseBannerResponse, error)
}

type bannerRotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotationServiceClient(cc grpc.ClientConnInterface) BannerRotationServiceClient {
	return &bannerRotationServiceClient{cc}
}

func (c *bannerRotationServiceClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/BannerRotationService/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) RemoveBanner(ctx context.Context, in *RemoveBannerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/BannerRotationService/RemoveBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) IncrementCounter(ctx context.Context, in *IncrementCounterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/BannerRotationService/IncrementCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationServiceClient) ChooseBanner(ctx context.Context, in *ChooseBannerRequest, opts ...grpc.CallOption) (*ChooseBannerResponse, error) {
	out := new(ChooseBannerResponse)
	err := c.cc.Invoke(ctx, "/BannerRotationService/ChooseBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotationServiceServer is the server API for BannerRotationService service.
// All implementations must embed UnimplementedBannerRotationServiceServer
// for forward compatibility
type BannerRotationServiceServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*empty.Empty, error)
	RemoveBanner(context.Context, *RemoveBannerRequest) (*empty.Empty, error)
	IncrementCounter(context.Context, *IncrementCounterRequest) (*empty.Empty, error)
	ChooseBanner(context.Context, *ChooseBannerRequest) (*ChooseBannerResponse, error)
	mustEmbedUnimplementedBannerRotationServiceServer()
}

// UnimplementedBannerRotationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotationServiceServer struct {
}

func (UnimplementedBannerRotationServiceServer) AddBanner(context.Context, *AddBannerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) RemoveBanner(context.Context, *RemoveBannerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) IncrementCounter(context.Context, *IncrementCounterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCounter not implemented")
}
func (UnimplementedBannerRotationServiceServer) ChooseBanner(context.Context, *ChooseBannerRequest) (*ChooseBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseBanner not implemented")
}
func (UnimplementedBannerRotationServiceServer) mustEmbedUnimplementedBannerRotationServiceServer() {}

// UnsafeBannerRotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotationServiceServer will
// result in compilation errors.
type UnsafeBannerRotationServiceServer interface {
	mustEmbedUnimplementedBannerRotationServiceServer()
}

func RegisterBannerRotationServiceServer(s grpc.ServiceRegistrar, srv BannerRotationServiceServer) {
	s.RegisterService(&_BannerRotationService_serviceDesc, srv)
}

func _BannerRotationService_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BannerRotationService/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_RemoveBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).RemoveBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BannerRotationService/RemoveBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).RemoveBanner(ctx, req.(*RemoveBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_IncrementCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).IncrementCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BannerRotationService/IncrementCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).IncrementCounter(ctx, req.(*IncrementCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotationService_ChooseBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServiceServer).ChooseBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BannerRotationService/ChooseBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServiceServer).ChooseBanner(ctx, req.(*ChooseBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BannerRotationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BannerRotationService",
	HandlerType: (*BannerRotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _BannerRotationService_AddBanner_Handler,
		},
		{
			MethodName: "RemoveBanner",
			Handler:    _BannerRotationService_RemoveBanner_Handler,
		},
		{
			MethodName: "IncrementCounter",
			Handler:    _BannerRotationService_IncrementCounter_Handler,
		},
		{
			MethodName: "ChooseBanner",
			Handler:    _BannerRotationService_ChooseBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner_rotation_service.proto",
}
