// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/oleglarionov/otusgolang_finalproject/internal/domain/banerrotation"
	"github.com/oleglarionov/otusgolang_finalproject/internal/grpc"
	"github.com/oleglarionov/otusgolang_finalproject/internal/grpc/generated"
	"github.com/oleglarionov/otusgolang_finalproject/internal/infrastructure/repository/sql"
	"github.com/oleglarionov/otusgolang_finalproject/internal/infrastructure/streamer"
	"github.com/oleglarionov/otusgolang_finalproject/internal/usecase"
)

// Injectors from wire.go:

func setup(cfg Config) (*App, func(), error) {
	dbConnectorImpl, cleanup, err := dbConnectorProvider(cfg)
	if err != nil {
		return nil, nil, err
	}
	bannerRepository := sql.NewBannerRepository(dbConnectorImpl)
	counterRepository := sql.NewCounterRepository(dbConnectorImpl)
	chooserImpl := banerrotation.NewChooserImpl(bannerRepository, counterRepository)
	amqpStreamer, cleanup2, err := streamerProvider(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	bannerRotationImpl := usecase.NewBannerRotationImpl(chooserImpl, bannerRepository, counterRepository, amqpStreamer)
	bannerRotationServerImpl := internalgrpc.NewBannerRotationServerImpl(bannerRotationImpl)
	server := grpcServerProvider(cfg, bannerRotationServerImpl)
	app := NewApp(server)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func grpcServerProvider(cfg Config, service grpcgenerated.BannerRotationServiceServer) *internalgrpc.Server {
	return internalgrpc.NewServer(cfg.ServerPort, service)
}

func dbConnectorProvider(cfg Config) (*sql.DBConnectorImpl, func(), error) {
	dbConnector := sql.NewDBConnectorImpl(cfg.DBDsn)
	cleanup := func() { dbConnector.CloseConn() }

	return dbConnector, cleanup, nil
}

func streamerProvider(cfg Config) (*streamer.AMQPStreamer, func(), error) {
	s := streamer.NewAMQPStreamer(cfg.Rabbit)
	cleanup := func() { s.Close() }

	return s, cleanup, nil
}
